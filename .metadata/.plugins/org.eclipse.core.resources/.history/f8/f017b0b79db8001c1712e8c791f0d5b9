#include "MPU6050.hpp"
#include "debug_usart.hpp"

#ifndef M_PI
#define M_PI 3.14159265359
#endif // M_PI
#ifndef RAD_TO_DEG
#define RAD_TO_DEG 180.0 / M_PI
#endif // RAD_TO_DEG

#define sqr(x) x *x
#define hypotenuse(x, y) sqrt(sqr(x) + sqr(y))


MPU6050::MPU6050(I2C_HandleTypeDef* hi2c, uint8_t address): hi2c_(hi2c), devAddr_(address)
{
    I2Cdev_init(hi2c); // init of i2cdevlib.  
    lastProcessed_ = 0;
}

/** Power on and prepare for general usage.
 * This will activate the device and take it out of sleep mode (which must be done
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::Init()
{
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    
    setDLPFMode(MPU6050_DLPF_BW_98);
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!

}

uint8_t MPU6050::getDeviceID()
{
    I2Cdev_readBits(devAddr_, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer_,0);
    return buffer_[0];
}

/** Get raw 6-axis motion sensor readings (accel/gyro).
 * Retrieves all currently available motion sensor values.
 * @param ax 16-bit signed integer container for accelerometer X-axis value
 * @param ay 16-bit signed integer container for accelerometer Y-axis value
 * @param az 16-bit signed integer container for accelerometer Z-axis value
 * @param gx 16-bit signed integer container for gyroscope X-axis value
 * @param gy 16-bit signed integer container for gyroscope Y-axis value
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz)
{
    I2Cdev_readBytes(devAddr_, MPU6050_RA_ACCEL_XOUT_H, 14, buffer_, 0 ); // Read the six raw data registers into data array
    *ax = (((int16_t) buffer_[0]) << 8) | buffer_[1]; // Turn the MSB and LSB into a signed 16-bit value
    *ay = (((int16_t) buffer_[2]) << 8) | buffer_[3];
    *az = (((int16_t) buffer_[4]) << 8) | buffer_[5];
    *gx = (((int16_t) buffer_[8]) << 8) | buffer_[9];
    *gy = (((int16_t) buffer_[10]) << 8) | buffer_[11];
    *gz = (((int16_t) buffer_[12]) << 8) | buffer_[13];
}


/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection()
{
    return getDeviceID() == 0x34;
}

void MPU6050::Update()
{

    getMotion6(&dataRaw.ax, &dataRaw.ay, &dataRaw.az, &dataRaw.gx, &dataRaw.gy, &dataRaw.gz);
    data.ax = (float) dataRaw.ax / accRangeScale_;
    data.ay = (float) dataRaw.ay / accRangeScale_;
    data.az = (float) dataRaw.az / accRangeScale_;
    data.gx = (float) dataRaw.gx / gyroRangeScale_;
    data.gy = (float) dataRaw.gy / gyroRangeScale_;
    data.gz = (float) dataRaw.gz / gyroRangeScale_;
}



/** Set clock source setting.
 * An internal 8MHz oscillator, gyroscope based clock, or external sources can
 * be selected as the MPU-60X0 clock source. When the internal 8 MHz oscillator
 * or an external source is chosen as the clock source, the MPU-60X0 can operate
 * in low power modes with the gyroscopes disabled.
 *
 * Upon power up, the MPU-60X0 clock source defaults to the internal oscillator.
 * However, it is highly recommended that the device be configured to use one of
 * the gyroscopes (or an external clock source) as the clock reference for
 * improved stability. The clock source can be selected according to the following table:
 *
 * <pre>
 * CLK_SEL | Clock Source
 * --------+--------------------------------------
 * 0       | Internal oscillator
 * 1       | PLL with X Gyro reference
 * 2       | PLL with Y Gyro reference
 * 3       | PLL with Z Gyro reference
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
 * </pre>
 *
 * @param source New clock source setting
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source)
{
    I2Cdev_writeBits(devAddr_, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
}

/** Set full-scale gyroscope range.
 * @param range New full-scale gyroscope range value
 * @see getFullScaleRange()
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range)
{
    I2Cdev_writeBits(devAddr_, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH,
                     range);

    switch (range)
    {
        case MPU6050_GYRO_FS_250:
            gyroRangeScale_ = 32768 / 250.0;
            break;
        case MPU6050_GYRO_FS_500:
            gyroRangeScale_ = 32768 / 500.0;
            break;
        case MPU6050_GYRO_FS_1000:
            gyroRangeScale_ = 32768 / 1000.0;
            break;
        case MPU6050_GYRO_FS_2000:
            gyroRangeScale_ = 32768 / 2000.0;
            break;
        default:
            break;
    }
}

/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range)
{
    I2Cdev_writeBits(devAddr_, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH,
                     range);

    switch (range)
    {
        case MPU6050_ACCEL_FS_2:
            accRangeScale_ = 32768 / 2.0;
            break;
        case MPU6050_ACCEL_FS_4:
            accRangeScale_ = 32768 / 4.0;
            break;
        case MPU6050_ACCEL_FS_8:
            accRangeScale_ = 32768 / 8.0;
            break;
        case MPU6050_ACCEL_FS_16:
            accRangeScale_ = 32768 / 16.0;
            break;
        default:
            break;
    }
}

/** Set digital low-pass filter configuration.
 * @param mode New DLFP configuration setting
 * @see getDLPFBandwidth()
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode)
{
    I2Cdev_writeBits(devAddr_, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
}

/** Set sleep mode status.
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled)
{
    I2Cdev_writeBit(devAddr_, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
}

void MPU6050::getRollPitchFromAccel(float *roll, float *pitch)
{
    float ax = data.ax;
    float ay = data.ay;
    float az = data.az;

    float norm = sqrt(ax * ax + ay * ay + az * az);
    ax /= norm;
    ay /= norm;
    az /= norm;

    // atan(a/b) atan2(a,b) 
    // use atan2 can avoid the error when b is 0
    #ifdef RESTRICT_PITCH
    *roll = atan2(ay, az) * RAD_TO_DEG;
    *pitch = atan(ax / sqrt(ay * ay + az * az)) * RAD_TO_DEG;
    #else
    *roll = atan(ay / sqrt(ax * ax + az * az)) * RAD_TO_DEG;
    *pitch = atan2(ax, az) * RAD_TO_DEG;
    #endif
    DEBUG_PRINTF("Accelerometer Measured roll: %f, pitch: %f\n", *roll, *pitch);
}

void getRotation(float & roll, float & pitch)
{
    static float dt = 0;
    dt = (float)(HAL_GetTick() - lastProcessed) / 1000;
    lastProcessed = HAL_GetTick();

    getRollPitchFromAccel(roll_,pitch_);
    gyroXRate_ = data.gx / 131.0; // Convert to deg/s
    gyroYRate_ = data.gy / 131.0; // Convert to deg/s

#ifdef RESTRICT_PITCH
    // This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
    if ((roll_ < -90 && kalXAngle_ > 90) ||
        (roll_ > 90 && kalXAngle_ < -90))
    {
        kalmanX_.setAngle(roll_);
        kalXAngle_ = roll_;
        gyroXAngle_ = roll_;
    }
    else
    {
        kalXAngle_ = kalmanX_.getAngle(roll_, gyroXRate_, dt); // Calculate the angle using a Kalman filter
    }

    if (abs(kalXAngle_) > 90)
        gyroYRate_ = -gyroYRate_; // Invert rate, so it fits the restriced accelerometer reading
    kalYAngle_ = kalmanX_.getAngle(pitch_, gyroYRate_, dt);
#else
    // This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
    if ((pitch_ < -90 && kalYAngle_ > 90) ||
        (pitch_ > 90 && kalYAngle_ < -90))
    {
        kalmanX_.setAngle(pitch_);
        kalYAngle_ = pitch;
        gyroYAngle_ = pitch;
    }
    else
    {
        kalYAngle_ = kalmanY_.getAngle( pitch_, gyroYRate_, dt); // Calculate the angle using a Kalman filter
    }

    if (abs(kalYAngle_) > 90)
        gyroXRate_ = -gyroXRate_;                                   // Invert rate, so it fits the restriced accelerometer reading
    kalXAngle_ = kalmanY_.getAngle( roll_, gyroXRate_, dt); // Calculate the angle using a Kalman filter
#endif

    gyroXAngle_ += gyroXRate_ * dt; // Calculate gyro angle without any filter
    gyroYAngle_ += gyroYRate_ * dt;
    //gyroXAngle_ += kalmanX.rate * dt; // Calculate gyro angle using the unbiased rate
    //gyroYAngle_ += kalmanY.rate * dt;

    // Reset the gyro angle when it has drifted too much
    if (gyroXAngle_ < -180 || gyroXAngle_ > 180)
        gyroXAngle_ = kalXAngle_;
    if (gyroYAngle_ < -180 || gyroYAngle_ > 180)
        gyroYAngle_ = kalYAngle_;
    
    roll = kalXAngle_;
    pitch = kalYAngle_;
    DEBUG_PRINTF("KalAngleX: %f\r\nKalAngleY: %f\r\n",kalXAngle_,kalYAngle_);
}